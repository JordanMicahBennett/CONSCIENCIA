//~This file was automatically generated via CupAndLexEasyGenerator 1.0.0.1~
//~Author:Jordan Micah Bennett~


//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jul 30 16:45:58 EDT 2015
//----------------------------------------------------

package data.packages.CONSCIENCIA.SYNTAX;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Thu Jul 30 16:45:58 EDT 2015
  */
public class CONSCIENCIAParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CONSCIENCIAParser() {super();}

  /** Constructor which sets the default scanner. */
  public CONSCIENCIAParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\003\003\000\002\002\004\000\002\004" +
    "\004\000\002\004\003\000\002\005\003\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\007\006\000\002" +
    "\006\007\000\002\024\003\000\002\024\003\000\002\025" +
    "\003\000\002\025\005\000\002\022\003\000\002\022\003" +
    "\000\002\023\003\000\002\023\005\000\002\026\003\000" +
    "\002\026\003\000\002\027\003\000\002\027\005\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\012\006\000\002\012\006" +
    "\000\002\012\006\000\002\012\006\000\002\014\005\000" +
    "\002\015\005\000\002\015\006\000\002\016\012\000\002" +
    "\016\010\000\002\017\005\000\002\017\005\000\002\017" +
    "\006\000\002\017\005\000\002\017\007\000\002\017\007" +
    "\000\002\017\007\000\002\017\005\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\006\000\002" +
    "\017\006\000\002\017\006\000\002\017\006\000\002\017" +
    "\003\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\005\000\002\030\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\074\015\056\016\027\017\031\020\032\021" +
    "\040\023\042\027\026\032\006\034\035\035\024\060\041" +
    "\061\015\062\021\064\047\065\043\067\052\101\025\113" +
    "\005\114\023\115\050\123\020\127\030\130\034\131\055" +
    "\132\011\133\051\134\045\135\016\136\017\001\002\000" +
    "\004\002\221\001\002\000\064\015\056\016\027\017\031" +
    "\020\032\021\040\023\042\027\026\032\006\034\035\035" +
    "\024\060\041\061\015\062\021\064\047\065\043\067\052" +
    "\123\020\127\030\130\034\131\055\132\011\133\051\134" +
    "\061\135\016\136\017\001\002\000\050\015\056\016\027" +
    "\017\031\020\032\021\040\023\042\027\026\032\006\034" +
    "\035\035\024\123\020\127\030\130\034\131\055\132\011" +
    "\133\051\134\061\135\016\136\017\001\002\000\006\014" +
    "\210\106\211\001\002\000\076\002\001\015\056\016\027" +
    "\017\031\020\032\021\040\023\042\027\026\032\006\034" +
    "\035\035\024\060\041\061\015\062\021\064\047\065\043" +
    "\067\052\101\025\113\005\114\023\115\050\123\020\127" +
    "\030\130\034\131\055\132\011\133\051\134\045\135\016" +
    "\136\017\001\002\000\042\004\uffc1\005\uffc1\006\uffc1\007" +
    "\uffc1\010\uffc1\013\uffc1\014\uffc1\024\uffc1\026\uffc1\030\uffc1" +
    "\031\uffc1\033\uffc1\054\uffc1\066\uffc1\070\uffc1\124\uffc1\001" +
    "\002\000\016\004\063\005\064\013\uffe4\014\uffe4\070\uffe4" +
    "\124\uffe4\001\002\000\076\002\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\020\ufffd\021\ufffd\023\ufffd\027\ufffd\032\ufffd\034\ufffd" +
    "\035\ufffd\060\ufffd\061\ufffd\062\ufffd\064\ufffd\065\ufffd\067" +
    "\ufffd\101\ufffd\113\ufffd\114\ufffd\115\ufffd\123\ufffd\127\ufffd" +
    "\130\ufffd\131\ufffd\132\ufffd\133\ufffd\134\ufffd\135\ufffd\136" +
    "\ufffd\001\002\000\012\013\uffe6\014\uffe6\070\uffe6\124\uffe6" +
    "\001\002\000\004\123\202\001\002\000\042\004\uffc2\005" +
    "\uffc2\006\uffc2\007\uffc2\010\uffc2\013\uffc2\014\uffc2\024\uffc2" +
    "\026\uffc2\030\uffc2\031\uffc2\033\uffc2\054\uffc2\066\uffc2\070" +
    "\uffc2\124\uffc2\001\002\000\042\004\uffc3\005\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\013\uffc3\014\uffc3\024\uffc3\026\uffc3\030" +
    "\uffc3\031\uffc3\033\uffc3\054\uffc3\066\uffc3\070\uffc3\124\uffc3" +
    "\001\002\000\064\015\056\016\027\017\031\020\032\021" +
    "\040\023\042\027\026\032\006\034\035\035\024\060\041" +
    "\061\015\062\021\064\047\065\043\067\052\123\020\127" +
    "\030\130\034\131\055\132\011\133\051\134\061\135\016" +
    "\136\017\001\002\000\004\123\174\001\002\000\076\002" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\023\ufffa" +
    "\027\ufffa\032\ufffa\034\ufffa\035\ufffa\060\ufffa\061\ufffa\062" +
    "\ufffa\064\ufffa\065\ufffa\067\ufffa\101\ufffa\113\ufffa\114\ufffa" +
    "\115\ufffa\123\ufffa\127\ufffa\130\ufffa\131\ufffa\132\ufffa\133" +
    "\ufffa\134\ufffa\135\ufffa\136\ufffa\001\002\000\064\015\056" +
    "\016\027\017\031\020\032\021\040\023\042\027\026\032" +
    "\006\034\035\035\024\060\041\061\015\062\021\064\047" +
    "\065\043\067\052\123\020\127\030\130\034\131\055\132" +
    "\011\133\051\134\061\135\016\136\017\001\002\000\006" +
    "\037\171\040\170\001\002\000\004\134\164\001\002\000" +
    "\050\015\056\016\027\017\031\020\032\021\040\023\042" +
    "\027\026\032\006\034\035\035\024\123\020\127\030\130" +
    "\034\131\055\132\011\133\051\134\061\135\016\136\017" +
    "\001\002\000\050\015\056\016\027\017\031\020\032\021" +
    "\040\023\042\027\026\032\006\034\035\035\024\123\020" +
    "\127\030\130\034\131\055\132\011\133\051\134\061\135" +
    "\016\136\017\001\002\000\042\004\uffc6\005\uffc6\006\uffc6" +
    "\007\uffc6\010\uffc6\013\uffc6\014\uffc6\024\uffc6\026\uffc6\030" +
    "\uffc6\031\uffc6\033\uffc6\054\uffc6\066\uffc6\070\uffc6\124\uffc6" +
    "\001\002\000\050\015\056\016\027\017\031\020\032\021" +
    "\040\023\042\027\026\032\006\034\035\035\024\123\020" +
    "\127\030\130\034\131\055\132\011\133\051\134\061\135" +
    "\016\136\017\001\002\000\050\015\056\016\027\017\031" +
    "\020\032\021\040\023\042\027\026\032\006\034\035\035" +
    "\024\123\020\127\030\130\034\131\055\132\011\133\051" +
    "\134\061\135\016\136\017\001\002\000\004\013\145\001" +
    "\002\000\042\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4" +
    "\013\uffc4\014\uffc4\024\uffc4\026\uffc4\030\uffc4\031\uffc4\033" +
    "\uffc4\054\uffc4\066\uffc4\070\uffc4\124\uffc4\001\002\000\004" +
    "\036\144\001\002\000\034\004\uffcb\005\uffcb\006\067\007" +
    "\070\010\066\013\uffcb\014\uffcb\024\uffcb\033\uffcb\054\uffcb" +
    "\066\uffcb\070\uffcb\124\uffcb\001\002\000\012\013\uffe5\014" +
    "\uffe5\070\uffe5\124\uffe5\001\002\000\050\015\056\016\027" +
    "\017\031\020\032\021\040\023\042\027\026\032\006\034" +
    "\035\035\024\123\020\127\030\130\034\131\055\132\011" +
    "\133\051\134\061\135\016\136\017\001\002\000\004\123" +
    "\125\001\002\000\050\015\056\016\027\017\031\020\032" +
    "\021\040\023\042\027\026\032\006\034\035\035\024\123" +
    "\020\127\030\130\034\131\055\132\011\133\051\134\061" +
    "\135\016\136\017\001\002\000\052\015\056\016\027\017" +
    "\031\020\032\021\040\023\042\027\026\032\006\034\035" +
    "\035\024\066\uffbd\123\020\127\030\130\034\131\055\132" +
    "\011\133\051\134\061\135\016\136\017\001\002\000\012" +
    "\013\uffe8\014\uffe8\070\uffe8\124\uffe8\001\002\000\022\004" +
    "\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\013\uffbf\014\uffee" +
    "\106\uffee\001\002\000\012\013\uffe7\014\uffe7\070\uffe7\124" +
    "\uffe7\001\002\000\004\123\107\001\002\000\064\015\056" +
    "\016\027\017\031\020\032\021\040\023\042\027\026\032" +
    "\006\034\035\035\024\060\041\061\015\062\021\064\047" +
    "\065\043\067\052\123\020\127\030\130\034\131\055\132" +
    "\011\133\051\134\061\135\016\136\017\001\002\000\042" +
    "\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\013\uffc0\014" +
    "\uffc0\024\uffc0\026\uffc0\030\uffc0\031\uffc0\033\uffc0\054\uffc0" +
    "\066\uffc0\070\uffc0\124\uffc0\001\002\000\066\015\056\016" +
    "\027\017\031\020\032\021\040\023\042\027\026\032\006" +
    "\034\035\035\024\060\041\061\015\062\021\064\047\065" +
    "\043\067\052\070\uffbd\123\020\127\030\130\034\131\055" +
    "\132\011\133\051\134\061\135\016\136\017\001\002\000" +
    "\042\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\013\uffc7" +
    "\014\uffc7\024\uffc7\026\uffc7\030\uffc7\031\uffc7\033\uffc7\054" +
    "\uffc7\066\uffc7\070\uffc7\124\uffc7\001\002\000\076\002\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\023\ufffb\027" +
    "\ufffb\032\ufffb\034\ufffb\035\ufffb\060\ufffb\061\ufffb\062\ufffb" +
    "\064\ufffb\065\ufffb\067\ufffb\101\ufffb\113\ufffb\114\ufffb\115" +
    "\ufffb\123\ufffb\127\ufffb\130\ufffb\131\ufffb\132\ufffb\133\ufffb" +
    "\134\ufffb\135\ufffb\136\ufffb\001\002\000\042\004\uffc5\005" +
    "\uffc5\006\uffc5\007\uffc5\010\uffc5\013\uffc5\014\uffc5\024\uffc5" +
    "\026\uffc5\030\uffc5\031\uffc5\033\uffc5\054\uffc5\066\uffc5\070" +
    "\uffc5\124\uffc5\001\002\000\050\015\056\016\027\017\031" +
    "\020\032\021\040\023\042\027\026\032\006\034\035\035" +
    "\024\123\020\127\030\130\034\131\055\132\011\133\051" +
    "\134\061\135\016\136\017\001\002\000\076\002\ufffe\015" +
    "\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\023\ufffe\027\ufffe" +
    "\032\ufffe\034\ufffe\035\ufffe\060\ufffe\061\ufffe\062\ufffe\064" +
    "\ufffe\065\ufffe\067\ufffe\101\ufffe\113\ufffe\114\ufffe\115\ufffe" +
    "\123\ufffe\127\ufffe\130\ufffe\131\ufffe\132\ufffe\133\ufffe\134" +
    "\ufffe\135\ufffe\136\ufffe\001\002\000\010\004\063\005\064" +
    "\054\062\001\002\000\042\004\uffbf\005\uffbf\006\uffbf\007" +
    "\uffbf\010\uffbf\013\uffbf\014\uffbf\024\uffbf\026\uffbf\030\uffbf" +
    "\031\uffbf\033\uffbf\054\uffbf\066\uffbf\070\uffbf\124\uffbf\001" +
    "\002\000\024\123\020\127\030\130\034\131\055\132\011" +
    "\133\051\134\061\135\016\136\017\001\002\000\024\123" +
    "\020\127\030\130\034\131\055\132\011\133\051\134\061" +
    "\135\016\136\017\001\002\000\024\123\020\127\030\130" +
    "\034\131\055\132\011\133\051\134\061\135\016\136\017" +
    "\001\002\000\034\004\uffd9\005\uffd9\006\067\007\070\010" +
    "\066\013\uffd9\014\uffd9\024\uffd9\033\uffd9\054\uffd9\066\uffd9" +
    "\070\uffd9\124\uffd9\001\002\000\024\123\020\127\030\130" +
    "\034\131\055\132\011\133\051\134\061\135\016\136\017" +
    "\001\002\000\024\123\020\127\030\130\034\131\055\132" +
    "\011\133\051\134\061\135\016\136\017\001\002\000\024" +
    "\123\020\127\030\130\034\131\055\132\011\133\051\134" +
    "\061\135\016\136\017\001\002\000\042\004\uffc9\005\uffc9" +
    "\006\uffc9\007\uffc9\010\uffc9\013\uffc9\014\uffc9\024\uffc9\026" +
    "\uffc9\030\uffc9\031\uffc9\033\uffc9\054\uffc9\066\uffc9\070\uffc9" +
    "\124\uffc9\001\002\000\042\004\uffca\005\uffca\006\uffca\007" +
    "\uffca\010\uffca\013\uffca\014\uffca\024\uffca\026\uffca\030\uffca" +
    "\031\uffca\033\uffca\054\uffca\066\uffca\070\uffca\124\uffca\001" +
    "\002\000\042\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\013\uffc8\014\uffc8\024\uffc8\026\uffc8\030\uffc8\031\uffc8\033" +
    "\uffc8\054\uffc8\066\uffc8\070\uffc8\124\uffc8\001\002\000\034" +
    "\004\uffda\005\uffda\006\067\007\070\010\066\013\uffda\014" +
    "\uffda\024\uffda\033\uffda\054\uffda\066\uffda\070\uffda\124\uffda" +
    "\001\002\000\034\004\uffd8\005\uffd8\006\067\007\070\010" +
    "\066\013\uffd8\014\uffd8\024\uffd8\033\uffd8\054\uffd8\066\uffd8" +
    "\070\uffd8\124\uffd8\001\002\000\004\070\ufff3\001\002\000" +
    "\006\014\103\070\ufff4\001\002\000\006\014\ufff2\070\ufff2" +
    "\001\002\000\004\070\102\001\002\000\012\013\uffdf\014" +
    "\uffdf\070\uffdf\124\uffdf\001\002\000\064\015\056\016\027" +
    "\017\031\020\032\021\040\023\042\027\026\032\006\034" +
    "\035\035\024\060\041\061\015\062\021\064\047\065\043" +
    "\067\052\123\020\127\030\130\034\131\055\132\011\133" +
    "\051\134\061\135\016\136\017\001\002\000\006\014\ufff1" +
    "\070\ufff1\001\002\000\004\013\106\001\002\000\076\002" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\023\ufff7" +
    "\027\ufff7\032\ufff7\034\ufff7\035\ufff7\060\ufff7\061\ufff7\062" +
    "\ufff7\064\ufff7\065\ufff7\067\ufff7\101\ufff7\113\ufff7\114\ufff7" +
    "\115\ufff7\123\ufff7\127\ufff7\130\ufff7\131\ufff7\132\ufff7\133" +
    "\ufff7\134\ufff7\135\ufff7\136\ufff7\001\002\000\052\015\056" +
    "\016\027\017\031\020\032\021\040\023\042\027\026\032" +
    "\006\034\035\035\024\123\020\124\uffbd\127\030\130\034" +
    "\131\055\132\011\133\051\134\061\135\016\136\017\001" +
    "\002\000\014\004\063\005\064\014\uffea\066\uffea\124\uffea" +
    "\001\002\000\010\014\115\066\uffec\124\uffec\001\002\000" +
    "\006\066\uffeb\124\uffeb\001\002\000\004\124\114\001\002" +
    "\000\012\013\uffdd\014\uffdd\070\uffdd\124\uffdd\001\002\000" +
    "\050\015\056\016\027\017\031\020\032\021\040\023\042" +
    "\027\026\032\006\034\035\035\024\123\020\127\030\130" +
    "\034\131\055\132\011\133\051\134\061\135\016\136\017" +
    "\001\002\000\014\004\063\005\064\014\uffe9\066\uffe9\124" +
    "\uffe9\001\002\000\004\066\120\001\002\000\012\013\uffde" +
    "\014\uffde\070\uffde\124\uffde\001\002\000\010\004\063\005" +
    "\064\024\122\001\002\000\050\004\uffd7\005\uffd7\013\uffd7" +
    "\014\uffd7\024\uffd7\033\uffd7\054\uffd7\066\uffd7\070\uffd7\123" +
    "\020\124\uffd7\127\030\130\034\131\055\132\011\133\051" +
    "\134\061\135\016\136\017\001\002\000\012\006\067\007" +
    "\070\010\066\026\124\001\002\000\026\004\uffd6\005\uffd6" +
    "\013\uffd6\014\uffd6\024\uffd6\033\uffd6\054\uffd6\066\uffd6\070" +
    "\uffd6\124\uffd6\001\002\000\064\015\056\016\027\017\031" +
    "\020\032\021\040\023\042\027\026\032\006\034\035\035" +
    "\024\060\041\061\015\062\021\064\047\065\043\067\052" +
    "\123\126\127\030\130\034\131\055\132\011\133\051\134" +
    "\061\135\016\136\017\001\002\000\064\015\056\016\027" +
    "\017\031\020\032\021\040\023\042\027\026\032\006\034" +
    "\035\035\024\060\041\061\015\062\021\064\047\065\043" +
    "\067\052\123\020\127\030\130\034\131\055\132\011\133" +
    "\051\134\061\135\016\136\017\001\002\000\004\014\130" +
    "\001\002\000\064\015\056\016\027\017\031\020\032\021" +
    "\040\023\042\027\026\032\006\034\035\035\024\060\041" +
    "\061\015\062\021\064\047\065\043\067\052\123\020\127" +
    "\030\130\034\131\055\132\011\133\051\134\061\135\016" +
    "\136\017\001\002\000\004\124\132\001\002\000\012\013" +
    "\uffdb\014\uffdb\070\uffdb\124\uffdb\001\002\000\006\014\134" +
    "\124\135\001\002\000\064\015\056\016\027\017\031\020" +
    "\032\021\040\023\042\027\026\032\006\034\035\035\024" +
    "\060\041\061\015\062\021\064\047\065\043\067\052\123" +
    "\020\127\030\130\034\131\055\132\011\133\051\134\061" +
    "\135\016\136\017\001\002\000\042\004\uffbe\005\uffbe\006" +
    "\uffbe\007\uffbe\010\uffbe\013\uffbe\014\uffbe\024\uffbe\026\uffbe" +
    "\030\uffbe\031\uffbe\033\uffbe\054\uffbe\066\uffbe\070\uffbe\124" +
    "\uffbe\001\002\000\004\124\137\001\002\000\004\124\140" +
    "\001\002\000\012\013\uffdc\014\uffdc\070\uffdc\124\uffdc\001" +
    "\002\000\010\004\063\005\064\054\142\001\002\000\024" +
    "\123\020\127\030\130\034\131\055\132\011\133\051\134" +
    "\061\135\016\136\017\001\002\000\034\004\uffcc\005\uffcc" +
    "\006\067\007\070\010\066\013\uffcc\014\uffcc\024\uffcc\033" +
    "\uffcc\054\uffcc\066\uffcc\070\uffcc\124\uffcc\001\002\000\026" +
    "\004\uffd2\005\uffd2\013\uffd2\014\uffd2\024\uffd2\033\uffd2\054" +
    "\uffd2\066\uffd2\070\uffd2\124\uffd2\001\002\000\076\002\ufffc" +
    "\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\023\ufffc\027" +
    "\ufffc\032\ufffc\034\ufffc\035\ufffc\060\ufffc\061\ufffc\062\ufffc" +
    "\064\ufffc\065\ufffc\067\ufffc\101\ufffc\113\ufffc\114\ufffc\115" +
    "\ufffc\123\ufffc\127\ufffc\130\ufffc\131\ufffc\132\ufffc\133\ufffc" +
    "\134\ufffc\135\ufffc\136\ufffc\001\002\000\010\004\063\005" +
    "\064\054\147\001\002\000\024\123\020\127\030\130\034" +
    "\131\055\132\011\133\051\134\061\135\016\136\017\001" +
    "\002\000\034\004\uffcd\005\uffcd\006\067\007\070\010\066" +
    "\013\uffcd\014\uffcd\024\uffcd\033\uffcd\054\uffcd\066\uffcd\070" +
    "\uffcd\124\uffcd\001\002\000\010\004\063\005\064\054\152" +
    "\001\002\000\024\123\020\127\030\130\034\131\055\132" +
    "\011\133\051\134\061\135\016\136\017\001\002\000\034" +
    "\004\uffce\005\uffce\006\067\007\070\010\066\013\uffce\014" +
    "\uffce\024\uffce\033\uffce\054\uffce\066\uffce\070\uffce\124\uffce" +
    "\001\002\000\010\004\063\005\064\054\155\001\002\000" +
    "\024\123\020\127\030\130\034\131\055\132\011\133\051" +
    "\134\061\135\016\136\017\001\002\000\034\004\uffcf\005" +
    "\uffcf\006\067\007\070\010\066\013\uffcf\014\uffcf\024\uffcf" +
    "\033\uffcf\054\uffcf\066\uffcf\070\uffcf\124\uffcf\001\002\000" +
    "\010\004\063\005\064\024\160\001\002\000\024\123\020" +
    "\127\030\130\034\131\055\132\011\133\051\134\061\135" +
    "\016\136\017\001\002\000\014\006\067\007\070\010\066" +
    "\030\163\031\162\001\002\000\026\004\uffd4\005\uffd4\013" +
    "\uffd4\014\uffd4\024\uffd4\033\uffd4\054\uffd4\066\uffd4\070\uffd4" +
    "\124\uffd4\001\002\000\026\004\uffd5\005\uffd5\013\uffd5\014" +
    "\uffd5\024\uffd5\033\uffd5\054\uffd5\066\uffd5\070\uffd5\124\uffd5" +
    "\001\002\000\004\103\165\001\002\000\064\015\056\016" +
    "\027\017\031\020\032\021\040\023\042\027\026\032\006" +
    "\034\035\035\024\060\041\061\015\062\021\064\047\065" +
    "\043\067\052\123\020\127\030\130\034\131\055\132\011" +
    "\133\051\134\061\135\016\136\017\001\002\000\004\013" +
    "\167\001\002\000\076\002\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\021\ufff5\023\ufff5\027\ufff5\032\ufff5\034\ufff5\035" +
    "\ufff5\060\ufff5\061\ufff5\062\ufff5\064\ufff5\065\ufff5\067\ufff5" +
    "\101\ufff5\113\ufff5\114\ufff5\115\ufff5\123\ufff5\127\ufff5\130" +
    "\ufff5\131\ufff5\132\ufff5\133\ufff5\134\ufff5\135\ufff5\136\ufff5" +
    "\001\002\000\026\004\uffd0\005\uffd0\013\uffd0\014\uffd0\024" +
    "\uffd0\033\uffd0\054\uffd0\066\uffd0\070\uffd0\124\uffd0\001\002" +
    "\000\026\004\uffd1\005\uffd1\013\uffd1\014\uffd1\024\uffd1\033" +
    "\uffd1\054\uffd1\066\uffd1\070\uffd1\124\uffd1\001\002\000\004" +
    "\013\173\001\002\000\076\002\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\021\ufff8\023\ufff8\027\ufff8\032\ufff8\034\ufff8" +
    "\035\ufff8\060\ufff8\061\ufff8\062\ufff8\064\ufff8\065\ufff8\067" +
    "\ufff8\101\ufff8\113\ufff8\114\ufff8\115\ufff8\123\ufff8\127\ufff8" +
    "\130\ufff8\131\ufff8\132\ufff8\133\ufff8\134\ufff8\135\ufff8\136" +
    "\ufff8\001\002\000\006\060\041\134\176\001\002\000\004" +
    "\124\200\001\002\000\004\124\177\001\002\000\012\013" +
    "\uffe0\014\uffe0\070\uffe0\124\uffe0\001\002\000\012\013\uffe1" +
    "\014\uffe1\070\uffe1\124\uffe1\001\002\000\004\124\135\001" +
    "\002\000\006\060\041\134\204\001\002\000\004\124\206" +
    "\001\002\000\004\124\205\001\002\000\012\013\uffe2\014" +
    "\uffe2\070\uffe2\124\uffe2\001\002\000\012\013\uffe3\014\uffe3" +
    "\070\uffe3\124\uffe3\001\002\000\076\002\uffff\015\uffff\016" +
    "\uffff\017\uffff\020\uffff\021\uffff\023\uffff\027\uffff\032\uffff" +
    "\034\uffff\035\uffff\060\uffff\061\uffff\062\uffff\064\uffff\065" +
    "\uffff\067\uffff\101\uffff\113\uffff\114\uffff\115\uffff\123\uffff" +
    "\127\uffff\130\uffff\131\uffff\132\uffff\133\uffff\134\uffff\135" +
    "\uffff\136\uffff\001\002\000\004\134\214\001\002\000\064" +
    "\015\056\016\027\017\031\020\032\021\040\023\042\027" +
    "\026\032\006\034\035\035\024\060\041\061\015\062\021" +
    "\064\047\065\043\067\052\123\020\127\030\130\034\131" +
    "\055\132\011\133\051\134\061\135\016\136\017\001\002" +
    "\000\004\013\213\001\002\000\076\002\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\023\ufff6\027\ufff6\032\ufff6" +
    "\034\ufff6\035\ufff6\060\ufff6\061\ufff6\062\ufff6\064\ufff6\065" +
    "\ufff6\067\ufff6\101\ufff6\113\ufff6\114\ufff6\115\ufff6\123\ufff6" +
    "\127\ufff6\130\ufff6\131\ufff6\132\ufff6\133\ufff6\134\ufff6\135" +
    "\ufff6\136\ufff6\001\002\000\006\014\uffed\106\uffed\001\002" +
    "\000\010\004\063\005\064\033\216\001\002\000\026\004" +
    "\uffd3\005\uffd3\013\uffd3\014\uffd3\024\uffd3\033\uffd3\054\uffd3" +
    "\066\uffd3\070\uffd3\124\uffd3\001\002\000\004\013\220\001" +
    "\002\000\076\002\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\021\ufff9\023\ufff9\027\ufff9\032\ufff9\034\ufff9\035\ufff9\060" +
    "\ufff9\061\ufff9\062\ufff9\064\ufff9\065\ufff9\067\ufff9\101\ufff9" +
    "\113\ufff9\114\ufff9\115\ufff9\123\ufff9\127\ufff9\130\ufff9\131" +
    "\ufff9\132\ufff9\133\ufff9\134\ufff9\135\ufff9\136\ufff9\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\040\003\003\004\007\005\056\006\012\007" +
    "\021\010\053\012\045\013\032\014\043\015\013\016\036" +
    "\017\011\020\035\021\052\023\006\001\001\000\002\001" +
    "\001\000\022\012\045\013\216\014\043\015\013\016\036" +
    "\017\011\020\035\021\052\001\001\000\010\017\214\020" +
    "\035\021\052\001\001\000\002\001\001\000\034\005\206" +
    "\006\012\007\021\010\053\012\045\013\032\014\043\015" +
    "\013\016\036\017\011\020\035\021\052\023\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\012\045\013\200\014\043\015\013\016" +
    "\036\017\011\020\035\021\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\012\045\013\171\014\043\015" +
    "\013\016\036\017\011\020\035\021\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\156\020\035\021" +
    "\052\001\001\000\010\017\153\020\035\021\052\001\001" +
    "\000\002\001\001\000\010\017\150\020\035\021\052\001" +
    "\001\000\010\017\145\020\035\021\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\140\020\035\021\052" +
    "\001\001\000\002\001\001\000\010\017\120\020\035\021" +
    "\052\001\001\000\016\017\107\020\035\021\052\026\116" +
    "\027\110\030\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\012\045" +
    "\013\104\014\043\015\013\016\036\017\011\020\035\021" +
    "\052\001\001\000\002\001\001\000\030\012\045\013\077" +
    "\014\043\015\013\016\036\017\011\020\035\021\052\024" +
    "\100\025\076\030\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\057\020\035\021" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\074\021\052\001\001\000\006\020" +
    "\073\021\052\001\001\000\006\020\064\021\052\001\001" +
    "\000\002\001\001\000\004\021\072\001\001\000\004\021" +
    "\071\001\001\000\004\021\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\012" +
    "\045\013\103\014\043\015\013\016\036\017\011\020\035" +
    "\021\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\107\020\035\021\052\026\112" +
    "\027\110\030\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\115\020\035\021\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\122\021\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\012\045\013\126\014\043\015\013" +
    "\016\036\017\011\020\035\021\052\001\001\000\022\012" +
    "\045\013\132\014\043\015\013\016\036\017\011\020\035" +
    "\021\052\001\001\000\002\001\001\000\022\012\045\013" +
    "\130\014\043\015\013\016\036\017\011\020\035\021\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\012\045\013\135\014\043\015\013\016\036" +
    "\017\011\020\035\021\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\142\021\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\147\021\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\152\021\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\155\021\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\160" +
    "\021\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\012\045\013\165" +
    "\014\043\015\013\016\036\017\011\020\035\021\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\012\045\013\211\014\043\015\013" +
    "\016\036\017\011\020\035\021\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CONSCIENCIAParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CONSCIENCIAParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CONSCIENCIAParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println ("Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		CONSCIENCIALexer lexer;

		public CONSCIENCIAParser(CONSCIENCIALexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message + info);
		}

		public void syntax_error(Symbol cur_token) {
		    report_error("Syntax error on line " + lexer.getLine() +
				     " at char " + lexer.getChar() + ": ",
				 "Token " + cur_token +
				 "(" + lexer.getText() + ")");
		    //		    System.err.print("Line " + lexer.getLine() +
		    //				     " near char " + lexer.getChar() + ": ");
		    //		    System.err.println ("Last token read is " +
		    //					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CONSCIENCIAParser$actions {
  private final CONSCIENCIAParser parser;

  /** Constructor */
  CUP$CONSCIENCIAParser$actions(CONSCIENCIAParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CONSCIENCIAParser$do_action(
    int                        CUP$CONSCIENCIAParser$act_num,
    java_cup.runtime.lr_parser CUP$CONSCIENCIAParser$parser,
    java.util.Stack            CUP$CONSCIENCIAParser$stack,
    int                        CUP$CONSCIENCIAParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CONSCIENCIAParser$result;

      /* select the action based on the action number */
      switch (CUP$CONSCIENCIAParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // empty ::= 
            {
              Object RESULT = null;

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(22/*empty*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		 
	RESULT =e; 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(15/*factor*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= VARIABLE 
            {
              Exp RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 	
	RESULT =new ExpVar(var); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(15/*factor*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= STRING 
            {
              Exp RESULT = null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 	
	RESULT =new ExpLit(ilit); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(15/*factor*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= CHAR 
            {
              Exp RESULT = null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Char ilit = (Char)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 	
	RESULT =new ExpLit(ilit); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(15/*factor*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= INTEGER 
            {
              Exp RESULT = null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 	
	RESULT =new ExpLit(ilit); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(15/*factor*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= DOUBLE 
            {
              Exp RESULT = null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 	
	RESULT =new ExpLit(ilit); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(15/*factor*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= TRUE 
            {
              Exp RESULT = null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Boolean ilit = (Boolean)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 	
	RESULT =new ExpLit(ilit); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(15/*factor*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= FALSE 
            {
              Exp RESULT = null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Boolean ilit = (Boolean)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 	
	RESULT =new ExpLit(ilit); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(15/*factor*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= NIL 
            {
              Exp RESULT = null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Nil ilit = (Nil)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 
	RESULT =new ExpLit(ilit); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(15/*factor*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term ::= factor 
            {
              Exp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 
	RESULT =f; 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(14/*term*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term ::= term MOD factor 
            {
              Exp RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 
	RESULT =new ExpMod(t, f); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(14/*term*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= term DIV factor 
            {
              Exp RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 	
	RESULT =new ExpDiv(t, f); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(14/*term*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term ::= term MUL factor 
            {
              Exp RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 
	RESULT =new ExpMul(t, f); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(14/*term*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arith ::= term 
            {
              Exp RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 
	RESULT =t; 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(13/*arith*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arith ::= MODULATE arith AND term 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 
	RESULT =new ExpMod(a, t); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(13/*arith*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arith ::= QUOTE arith AND term 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 	
	RESULT =new ExpDiv(a, t); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(13/*arith*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arith ::= PRODUCE arith AND term 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 
	RESULT =new ExpMul(a, t); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(13/*arith*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arith ::= DIFFER arith AND term 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 	
	RESULT =new ExpSub(a, t); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(13/*arith*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arith ::= SIMULATION_QUERY_PREFIX_0 SIMULATION_QUERY_TARGET_1 
            {
              Exp RESULT = null;
		 	
	RESULT =new ExpConscienciaSimulatedOperatingSystem(); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(13/*arith*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arith ::= SIMULATION_QUERY_PREFIX_0 SIMULATION_QUERY_TARGET_0 
            {
              Exp RESULT = null;
		 	
	RESULT =new ExpConscienciaSimulationSimpleCellularAutomata(); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(13/*arith*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arith ::= DEFINITION_QUERY_PREFIX_0 PHILOSOPHICAL_DEFINITION_QUERY_TARGET_0 
            {
              Exp RESULT = null;
		 	
	RESULT =new ExpConscienciaDefinitionConsciousness(); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(13/*arith*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arith ::= TRUE_QUERY_SELF_WEIGHT_DECLARATION_PREFIX arith TRUE_QUERY_SELF_WEIGHT_DECLARATION_SUFFIX 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		 	
	RESULT =new ExpBodyMassIndexTrueQuery1(a); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(13/*arith*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arith ::= TRUE_QUERY_SELF_DECLARATION_PREFIX arith WEIGHT_QUERY_SUFFIX0 term TRUE_QUERY_SELF_DECLARATION_SUFFIX1 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		 	
	RESULT =new ExpBodyMassIndexTrueQuery0(a,t,new ExpLit("female")); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(13/*arith*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arith ::= TRUE_QUERY_SELF_DECLARATION_PREFIX arith WEIGHT_QUERY_SUFFIX0 term TRUE_QUERY_SELF_DECLARATION_SUFFIX0 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		 	
	RESULT =new ExpBodyMassIndexTrueQuery0(a,t,new ExpLit("male")); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(13/*arith*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arith ::= WEIGHT_QUERY_PREFIX arith WEIGHT_QUERY_SUFFIX0 term WEIGHT_QUERY_SUFFIX2 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		 	
	RESULT =new ExpBodyMassIndex(a,t); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(13/*arith*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arith ::= WEIGHT_QUERY_PREFIX arith WEIGHT_QUERY_SUFFIX0 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		 	
	RESULT =new ExpBodyMassIndex(a); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(13/*arith*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arith ::= SUMMATE arith AND term 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 	
	RESULT =new ExpAdd(a, t); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(13/*arith*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arith ::= arith MINUS term 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 	
	RESULT =new ExpSub(a, t); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(13/*arith*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arith ::= arith PLUS term 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 	
	RESULT =new ExpAdd(a, t); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(13/*arith*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // pairs ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              ExpPair RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).right;
		Exp a1 = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		Exp a2 = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		 
	RESULT =new ExpPair(a1, a2); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(12/*pairs*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // pairs ::= PAIR LPAREN LPAREN expression COMMA expression RPAREN RPAREN 
            {
              ExpPair RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-4)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-4)).right;
		Exp a1 = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).right;
		Exp a2 = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).value;
		 
	RESULT =new ExpPair(a1, a2); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(12/*pairs*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lists ::= LIST LPAREN pairList RPAREN 
            {
              Exp RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		ExpList pl = (ExpList)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		 
	RESULT =pl; 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(11/*lists*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lists ::= LBRACK pairList RBRACK 
            {
              Exp RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		ExpList pl = (ExpList)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		 
	RESULT =pl;

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(11/*lists*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // vectors ::= LVECTORBRACK expList RVECTORBRACK 
            {
              Exp RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		ArrayList el = (ArrayList)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		 
	RESULT =new ExpVector(el); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(10/*vectors*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // calls ::= CDR LPAREN VARIABLE RPAREN 
            {
              Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		 
	RESULT =new ExpCdr(v); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(8/*calls*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // calls ::= CDR LPAREN pairs RPAREN 
            {
              Exp RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		ExpPair p = (ExpPair)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		 
	RESULT =new ExpCdr(p); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(8/*calls*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // calls ::= CAR LPAREN VARIABLE RPAREN 
            {
              Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		 
	RESULT =new ExpCar(v); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(8/*calls*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // calls ::= CAR LPAREN pairs RPAREN 
            {
              Exp RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		ExpPair p = (ExpPair)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		 
	RESULT =new ExpCar(p); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(8/*calls*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= arith 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 
	RESULT =a; 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(9/*expression*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= pairs 
            {
              Exp RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		ExpPair p = (ExpPair)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 
	RESULT =p; 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(9/*expression*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= lists 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 
	RESULT =l; 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(9/*expression*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= calls 
            {
              Exp RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 
	RESULT =c; 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(9/*expression*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= vectors 
            {
              Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 
	RESULT =v; 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(9/*expression*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // pairingExps ::= pairingExps COMMA arith 
            {
              ExpList RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).right;
		ExpList lst = (ExpList)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		
	lst.add( a );
	RESULT =lst;

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(21/*pairingExps*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // pairingExps ::= arith 
            {
              ExpList RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		
	ExpList pl = new ExpList( a );                                    
	RESULT =pl;

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(21/*pairingExps*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // pairList ::= empty 
            {
              ExpList RESULT = null;
		
	RESULT =new ExpList( new ExpLit( new Nil() ) );

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(20/*pairList*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // pairList ::= pairingExps 
            {
              ExpList RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		ExpList lst = (ExpList)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		
	RESULT =lst;

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(20/*pairList*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // nonEmptyIds ::= nonEmptyIds COMMA VARIABLE 
            {
              ArrayList RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).right;
		ArrayList lst = (ArrayList)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		
	lst.add(v);
	RESULT =lst;

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(17/*nonEmptyIds*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // nonEmptyIds ::= VARIABLE 
            {
              ArrayList RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		
	ArrayList tmp = new ArrayList();
	tmp.add(v);
	RESULT =tmp;

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(17/*nonEmptyIds*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // idList ::= empty 
            {
              ArrayList RESULT = null;
		
	RESULT =new ArrayList();

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(16/*idList*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // idList ::= nonEmptyIds 
            {
              ArrayList RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		ArrayList lst = (ArrayList)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		
	RESULT =lst;

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(16/*idList*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // nonEmptyExps ::= nonEmptyExps COMMA expression 
            {
              ArrayList RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).right;
		ArrayList lst = (ArrayList)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		
	lst.add(e);
	RESULT =lst;

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(19/*nonEmptyExps*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // nonEmptyExps ::= expression 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		
	ArrayList tmp = new ArrayList();
	tmp.add(e);
	RESULT =tmp;

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(19/*nonEmptyExps*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expList ::= empty 
            {
              ArrayList RESULT = null;
		 
	RESULT =new ArrayList(); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(18/*expList*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expList ::= nonEmptyExps 
            {
              ArrayList RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		ArrayList lst = (ArrayList)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 
	RESULT =lst; 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(18/*expList*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // definition ::= DEFINE VARIABLE AS expression PERIOD 
            {
              StmtDefinition RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		 
	RESULT =new StmtDefinition(v, e); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(4/*definition*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // assigns ::= nonEmptyIds ASSIGN expression PERIOD 
            {
              Statement RESULT = null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).right;
		ArrayList ids = (ArrayList)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		 
	RESULT =new AssignStmt(ids,e);

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(5/*assigns*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // prints ::= VISUALLY_DISPLAY expression PERIOD 
            {
              Statement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		 
	RESULT =new ExpVisualPrint(e, "\n"); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(6/*prints*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // prints ::= SUBSEQUENTLY_DISPLAY expression PERIOD 
            {
              Statement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		 
	RESULT =new ExpPrint(e, "\n"); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(6/*prints*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // prints ::= DISPLAY expression PERIOD 
            {
              Statement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		 
	RESULT =new ExpPrint(e, ""); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(6/*prints*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= assigns 
            {
              Statement RESULT = null;
		int asleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Statement as = (Statement)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 
	RESULT =as; 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= prints 
            {
              Statement RESULT = null;
		int prleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Statement pr = (Statement)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 
	RESULT =pr; 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= expression PERIOD 
            {
              Statement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		 
	RESULT =new Statement(e); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 
	RESULT =d; 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 
	RESULT =new StmtSequence(s); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(2/*stmtList*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		
	lst.add(s); 
	RESULT =lst;

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(2/*stmtList*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).right;
		ASTProgram start_val = (ASTProgram)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).value;
		RESULT = start_val;
              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$CONSCIENCIAParser$parser.done_parsing();
          return CUP$CONSCIENCIAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ASTProgram RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).value;
		 
	RESULT =new ASTProgram(s); 

              CUP$CONSCIENCIAParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CONSCIENCIAParser$stack.elementAt(CUP$CONSCIENCIAParser$top-0)).right, RESULT);
            }
          return CUP$CONSCIENCIAParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}
